//import org.gradle.api.artifacts.*
import org.gradle.nativeplatform.platform.internal.DefaultNativePlatform
plugins {
    id 'base'
    id 'com.palantir.docker' version '0.26.0'
    id 'com.palantir.docker-run' version '0.26.0'
    id 'pl.allegro.tech.build.axion-release' version '1.12.0'
}
project.version = scmVersion.version

repositories {
    mavenCentral()
}


docker {
    name "${project.name}:${project.version}"
    files "plugins.txt", "seedJob.xml"
}

//dockerRun {
//    name "${project.name}"
//    image "${project.name}:${project.version}"
//    ports '8080:8080'
//    clean true
//    daemonize false
//}

Process process
//if (DefaultNativePlatform.getCurrentOperatingSystem().isWindows()) {
//    process = "docker run --rm -v /var/run/docker.sock:/var/run/docker.sock alpine stat -c %g /var/run/docker.sock".execute()
//}
//else if (DefaultNativePlatform.getCurrentOperatingSystem().isLinux()) {
//    process = "stat -c %g /var/run/docker.sock".execute()
//}
//else if (DefaultNativePlatform.getCurrentOperatingSystem().isMacOsX()) {
//    process = "stat -f %g /var/run/docker.sock".execute()
//}
//else {
//    throw new GradleException("Unsupported operating system. No way to find group of /var/run/docker.sock.")
//}
//process = "stat -c %g /var/run/docker.sock".execute()
//def out = new ByteArrayOutputStream()
//process.waitForProcessOutput(out, System.err)
//String dockerSockGroupId = out.toString().trim()
String dockerSockGroupId = "root"
//String extraPrefix = getCurrentOperatingSystem().isWindows() ? '/' : ''

dockerRun {
    name "${project.name}"
    image "${project.name}:${project.version}"
    ports '8080:8080'
    clean true
    daemonize false
//    arguments '-v', "/var/run/docker.sock:/var/run/docker.sock"
    arguments '-v', "/var/run/docker.sock:/var/run/docker.sock", '--group-add', dockerSockGroupId
}